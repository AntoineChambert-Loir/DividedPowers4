/-
Copyright (c) 2025 Antoine Chambert-Loir, Mar√≠a In√©s de Frutos-Fern√°ndez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Antoine Chambert-Loir, Mar√≠a In√©s de Frutos-Fern√°ndez
-/
import Mathlib.Algebra.MvPolynomial.Eval
import Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous

/-! # Miscellaneous results about `GradedAlgebra` -/

noncomputable section

open Finset MvPolynomial DirectSum

section

theorem Finsupp.prod_mem_grade {Œ∫ A R : Type*} [AddCommMonoid Œ∫] [DecidableEq Œ∫] [CommSemiring A]
    [CommSemiring R] [Algebra R A] {ùíú : Œ∫ ‚Üí Submodule R A} [GradedAlgebra ùíú] {œÉ : Type*}
    {c : œÉ ‚Üí‚ÇÄ ‚Ñï} {f : œÉ ‚Üí A} {d : œÉ ‚Üí Œ∫} (hc : ‚àÄ s ‚àà c.support, f s ‚àà ùíú (d s)) :
    (c.prod fun s e => f s ^ e) ‚àà ùíú (c.sum fun s e => e ‚Ä¢ d s) := by
  classical
  rw [Finsupp.prod, Finsupp.sum]
  suffices ‚àÄ s (hs : s ‚äÜ c.support), ‚àè a ‚àà s, f a ^ c a ‚àà ùíú (‚àë a ‚àà s, c a ‚Ä¢ d a) by
    exact this c.support (subset_refl _)
  intro s hs
  induction s using Finset.induction_on with
  | empty => exact (SetLike.one_mem_graded ùíú)
  | insert a t ha ht =>
    rw [Finset.prod_insert ha, Finset.sum_insert ha]
    apply SetLike.mul_mem_graded
    ¬∑ apply SetLike.pow_mem_graded _ (hc _ (hs (mem_insert_self a t)))
    ¬∑ apply ht (subset_trans (subset_insert a t) hs)

end

namespace GradedAlgebra

section CommSemiring

variable {R : Type*} [CommSemiring R] {A : Type*} [CommSemiring A] [Algebra R A]

section AddCommMonoid

variable {Œπ : Type*} [AddCommMonoid Œπ] (ùíú : Œπ ‚Üí Submodule R A)

namespace GradeZero

theorem coe_smul (r : R) (x : ùíú 0) : (‚Üë(r ‚Ä¢ x) : A) = r ‚Ä¢ x := rfl

@[simp] theorem coe_zero : (‚Üë(0 : ùíú 0) : A) = 0 := rfl

variable [DecidableEq Œπ] [GradedAlgebra ùíú]

instance : One (ùíú 0) where
  one : ùíú 0 := ‚ü®1, SetLike.one_mem_graded ùíú‚ü©

instance : Mul (ùíú 0) where
  mul := fun x y => ‚ü®x * y, by
    convert SetLike.mul_mem_graded x.2 y.2
    rw [add_zero]‚ü©

@[simp] theorem coe_mul (x y : ùíú 0) : (‚Üë(x * y) : A) = x * y := rfl

@[simp] theorem val_mul (x y : ùíú 0) : (x * y).val = x.val * y.val := rfl

@[simp] theorem coe_one : (‚Üë(1 : ùíú 0) : A) = 1 := rfl

theorem one_mem : (1 : A) ‚àà ùíú 0 := SetLike.one_mem_graded ùíú

instance commSemiring : CommSemiring (ùíú 0) :=
  { (inferInstance : AddCommMonoid (ùíú 0)) with
    add  := (¬∑ + ¬∑)
    zero := 0
    mul := (¬∑ * ¬∑)
    one := 1
    natCast_zero := by simp only [Nat.cast_zero]
    natCast_succ := fun n ‚Ü¶ by simp only [Nat.cast_succ] -- TODO: Zulip?
    zero_mul := fun x => by ext; rw [coe_mul, coe_zero, zero_mul]
    mul_zero := fun x => by ext; rw [coe_mul, coe_zero, mul_zero]
    mul_assoc := fun x y z => by ext; simp only [coe_mul, mul_assoc]
    one_mul := fun x => by ext; rw [coe_mul, coe_one, one_mul]
    mul_one := fun x => by ext; rw [coe_mul, coe_one, mul_one]
    left_distrib := fun x y z => by ext; simp only [Submodule.coe_add, coe_mul, left_distrib]
    right_distrib := fun x y z => by ext; simp only [Submodule.coe_add, coe_mul, right_distrib]
    mul_comm := fun x y => by ext; simp only [coe_mul, mul_comm] }

instance algebra : Algebra R (ùíú 0) :=
  Algebra.ofModule' (fun r x => by ext; simp [SetLike.val_smul, Algebra.smul_mul_assoc, one_mul])
    (fun r x => by ext; simp only [SetLike.val_smul, Algebra.mul_smul_comm, mul_one])

end GradeZero

variable [DecidableEq Œπ] [GradedAlgebra ùíú]

/-- The projection from `A` to the degree `i` component `ùíú i`, as an `R`-linear map. -/
def proj' (i : Œπ) : A ‚Üí‚Çó[R] ùíú i where
  toFun a       := decompose ùíú a i
  map_add' a b  := by simp only [decompose_add, add_apply]
  map_smul' r a := by simp only [decompose_smul, RingHom.id_apply]; rfl

end AddCommMonoid

variable {Œπ : Type*} [AddCommMonoid Œπ] [PartialOrder Œπ] [CanonicallyOrderedAdd Œπ]
  (ùíú : Œπ ‚Üí Submodule R A) [DecidableEq Œπ] [GradedAlgebra ùíú]

/-- The projection from `A` to `ùíú 0`, as a `RingHom`. -/
@[simps]
def proj'_zeroRingHom : A ‚Üí+* ùíú 0 where
  toFun a := proj' ùíú 0 a
  map_one' := by
    ext
    simp only [proj', LinearMap.coe_mk, AddHom.coe_mk,
     decompose_of_mem_same ùíú (GradeZero.one_mem ùíú), GradeZero.coe_one]
  map_zero'    := by simp only [proj', decompose_zero, LinearMap.coe_mk, AddHom.coe_mk, zero_apply]
  map_add' _ _ := by simp only [proj', decompose_add, LinearMap.coe_mk, AddHom.coe_mk, add_apply]
  map_mul' x y := by
    ext
    simp only [proj', LinearMap.coe_mk, AddHom.coe_mk, GradeZero.coe_mul,
      ‚Üê GradedRing.projZeroRingHom_apply ùíú, ‚Üê _root_.map_mul]

end CommSemiring

section CommRing

variable {R A Œπ : Type*} [CommRing R] [CommRing A] [Algebra R A] [AddCommMonoid Œπ] [PartialOrder Œπ]
  [CanonicallyOrderedAdd Œπ] (ùíú : Œπ ‚Üí Submodule R A) [DecidableEq Œπ] [GradedAlgebra ùíú]

namespace GradeZero

instance commRing : CommRing (ùíú 0) :=
{ (inferInstance : AddCommGroup (ùíú 0)) with
    add  := (¬∑ + ¬∑)
    zero := 0
    mul  := (¬∑ * ¬∑)
    one  := 1
    natCast_zero := by simp only [Nat.cast_zero]
    natCast_succ := fun n ‚Ü¶ by simp only [Nat.cast_succ]
    intCast_ofNat := fun n ‚Ü¶ by simp only [Int.cast_natCast]
    intCast_negSucc := fun n ‚Ü¶ by rw [‚Üê Int.cast_negSucc]
    zero_mul := fun x => by ext; rw [coe_mul, coe_zero, zero_mul]
    mul_zero := fun x => by ext; rw [coe_mul, coe_zero, mul_zero]
    mul_assoc := fun x y z => by ext; simp only [coe_mul, mul_assoc]
    one_mul := fun x => by ext; rw [coe_mul, coe_one, one_mul]
    mul_one := fun x => by ext; rw [coe_mul, coe_one, mul_one]
    left_distrib := fun x y z => by ext; simp only [Submodule.coe_add, coe_mul, left_distrib]
    right_distrib := fun x y z => by ext; simp only [Submodule.coe_add, coe_mul, right_distrib]
    mul_comm := fun x y => by ext; simp only [coe_mul, mul_comm]
     }

end GradeZero

end CommRing

end GradedAlgebra

section GradedAlgebra

variable {R S : Type*} [CommSemiring R] {S : Type*} [CommSemiring S] [Algebra R S]

/-- An `R`-algebra map `f` between graded algebras `A` and `B` is homogeneous if for every degree
  `i`, `f(ùíú i) ‚äÜ ‚Ñ¨ (œÜ i)`, where `œÜ : Œπ ‚Üí Œ∫` is some provided map. -/
def GAlgHom.IsHomogeneous {Œπ Œ∫ : Type*} {A : Type*} [CommSemiring A] [Algebra R A]
    (ùíú : Œπ ‚Üí Submodule R A) {B : Type*} [CommSemiring B] [Algebra R B] [Algebra S B]
    (‚Ñ¨ : Œ∫ ‚Üí Submodule S B) (œÜ : Œπ ‚Üí Œ∫) (f : A ‚Üí‚Çê[R] B) : Prop :=
  ‚àÄ i a, a ‚àà ùíú i ‚Üí f a ‚àà ‚Ñ¨ (œÜ i)

/-- The evaluation of a weighted homogeneous polynomial at
  elements of adequate grades is homogeneous -/
theorem GAlgHom.IsHomogeneous_aeval {œÉ : Type*} {Œπ Œ∫ : Type*} [AddCommMonoid Œπ] [AddCommMonoid Œ∫]
    [DecidableEq Œ∫] (A : Type*) [CommSemiring A] [Algebra R A] (ùíú : Œ∫ ‚Üí Submodule R A)
    [GradedAlgebra ùíú] {w : œÉ ‚Üí Œπ} (œÜ : Œπ ‚Üí+ Œ∫) (f : œÉ ‚Üí A) (h : ‚àÄ s : œÉ, f s ‚àà ùíú (œÜ (w s))) :
    GAlgHom.IsHomogeneous (weightedHomogeneousSubmodule R w) ùíú œÜ (MvPolynomial.aeval f) := by
  intro i p hp
  simp only [mem_weightedHomogeneousSubmodule, IsWeightedHomogeneous] at hp
  rw [p.as_sum, map_sum]
  apply Submodule.sum_mem
  intro c hc
  rw [aeval_monomial, ‚Üê smul_eq_mul, algebraMap_smul]
  apply Submodule.smul_mem
  convert Finsupp.prod_mem_grade fun s _ => h s
  rw [‚Üê hp (mem_support_iff.mp hc), Finsupp.weight_apply,
    Finsupp.sum, map_sum, Finsupp.sum_of_support_subset _ subset_rfl]
  exact Finset.sum_congr rfl (fun _ _ ‚Ü¶ map_nsmul _ _ _ )
  . exact fun _ _ ‚Ü¶ zero_smul _ _

end GradedAlgebra
